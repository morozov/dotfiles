# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
    # Capture the output of the "git status" command.
    git_status="$(LANGUAGE=en git status 2> /dev/null)"

    # Set color based on clean/staged/dirty.
    if [[ ${git_status} =~ "working tree clean" ]]; then
        state="${LIGHT_GREEN}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${LIGHT_YELLOW}"
    else
        state="${LIGHT_RED}"
    fi

    # Get the name of the branch.
    branch_pattern="On branch ([^${IFS}]*)"
    diverge_pattern="Your branch and (.*) have diverged"
    detached_pattern="HEAD detached at (\S+)"

    remote=""

    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[1]}

        # add an else if or two here if you want to get more specific
        if [[ ${git_status} =~ Your[[:space:]]branch[[:space:]]is[[:space:]](ahead|behind) ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                remote="${WHITE}↑${COLOR_NONE}"
            elif [[ ${BASH_REMATCH[1]} == "behind" ]]; then
                remote="${WHITE}↓${COLOR_NONE}"
            fi
        fi

        if [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote="${WHITE}↕${COLOR_NONE}"
        fi
    elif [[ ${git_status} =~ ${detached_pattern} ]]; then
        branch=${BASH_REMATCH[1]}
    fi

    # Set the final branch string.
    BRANCH=" (${state}${branch}${COLOR_NONE}${remote})"
}
